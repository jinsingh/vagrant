server:
  applicationConnectors:
    - type: http
      port: <%= scope.function_hiera(["capd-matching-adapter-port"]) %>
  adminConnectors:
    - type: http
      port: <%= scope.function_hiera(["capd-matching-admin-adapter-port"]) %>

assertionLifetime: 5m
matchingServiceUri: <%= scope.function_hiera(["matching-service-url"]) %>
matchingServiceAdapterLocation: <%= scope.function_hiera(["matching-service-adapter-url"]) %>

saml:
  entityId: https://<%= scope.function_hiera(["capd-external-web-address"]) %>/msa

httpClient:
  timeout: 10s
  timeToLive: 10m
  cookiesEnabled: false
  connectionTimeout: 10s

metadataUri: <%= scope.function_hiera(["ida-hub-metadata-url"]) %>  # location to fetch hub metadata from (can be file URL)

acceptSelfSignedCerts: true

serviceInfo:
  name: matching-service-adapter

# If you would like the MSA to report to a graphite instance.
#metrics:
#  frequency: 30s
#  reporters:
#    - type: graphite
#      host: [graphite host]
#      port: [graphite port]
#      prefix: [some prefix of your choosing]

privateSigningKeyConfiguration:
  keyUri: <%= scope.function_hiera(["capd-msa-private-signing-key-uri"]) %>

privateEncryptionKeyConfiguration:
  keyUri: <%= scope.function_hiera(["capd-msa-private-encryption-key-uri"]) %>

publicSigningKeyConfiguration:
  keyUri: <%= scope.function_hiera(["capd-msa-public-signing-key-uri"]) %>
  keyName: <%= scope.function_hiera(["capd-msa-public-signing-key-name"]) %>

publicEncryptionKeyConfiguration:
  keyUri: <%= scope.function_hiera(["capd-msa-public-encryption-key-uri"]) %>
  keyName: <%= scope.function_hiera(["capd-msa-public-encryption-key-name"]) %>

logstashFormat: false

returnStackTraceInResponse: true

clientTrustStoreConfiguration:
  storeUri: <%= scope.function_hiera(["ida-truststore-uri"]) %>
  password: puppet

featureFlagConfiguration:
  encryptionDisabled: false
  isCertificateChainValidationRequired: true

logLevel: INFO
